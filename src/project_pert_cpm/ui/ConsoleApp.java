package ui;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class ConsoleApp {
    private static List<Project> projects = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    static class Project {
        String name;
        String description;
        List<Task> tasks = new ArrayList<>();

        Project(String name, String description) {
            this.name = name;
            this.description = description;
        }
    }

    static class Task {
        String name;
        int duration;

        Task(String name, int duration) {
            this.name = name;
            this.duration = duration;
        }
    }

    public static void main(String[] args) {
        System.out.println(" –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ - –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è");
        System.out.println("===========================================");


        while (true) {
            printMenu();
            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    createProject();
                    break;
                case "2":
                    addTaskToProject();
                    break;
                case "3":
                    showProjects();
                    break;
                case "4":
                    calculateCriticalPath();
                    break;
                case "0":
                    System.out.println("–í—ã—Ö–æ–¥...");
                    return;
                default:
                    System.out.println(" –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
            }
        }
    }

    private static void printMenu() {
        System.out.println("\n –ú–µ–Ω—é:");
        System.out.println("1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç");
        System.out.println("2. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –ø—Ä–æ–µ–∫—Ç");
        System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã");
        System.out.println("4. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å");
        System.out.println("0. –í—ã—Ö–æ–¥");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
    }

    private static void createProject() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ");
        String name = scanner.nextLine();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ");
        String description = scanner.nextLine();

        Project project = new Project(name, description);
        projects.add(project);

        System.out.println(" –ü—Ä–æ–µ–∫—Ç '" + name + "' —Å–æ–∑–¥–∞–Ω!");
    }

    private static void addTaskToProject() {
        if (projects.isEmpty()) {
            System.out.println(" –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç!");
            return;
        }

        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:");
        for (int i = 0; i < projects.size(); i++) {
            System.out.println((i + 1) + ". " + projects.get(i).name);
        }

        System.out.print("–ù–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: ");
        int projectIndex = Integer.parseInt(scanner.nextLine()) - 1;

        if (projectIndex < 0 || projectIndex >= projects.size()) {
            System.out.println(" –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞!");
            return;
        }

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ");
        String taskName = scanner.nextLine();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ –¥–Ω—è—Ö): ");
        int duration = Integer.parseInt(scanner.nextLine());

        Task task = new Task(taskName, duration);
        projects.get(projectIndex).tasks.add(task);

        System.out.println(" –ó–∞–¥–∞—á–∞ '" + taskName + "' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç '" +
                projects.get(projectIndex).name + "'!");
    }

    private static void showProjects() {
        if (projects.isEmpty()) {
            System.out.println(" –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç");
            return;
        }

        System.out.println("\n –í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:");
        for (int i = 0; i < projects.size(); i++) {
            Project project = projects.get(i);
            System.out.println((i + 1) + ". " + project.name + " - " + project.description);
            System.out.println("   –ó–∞–¥–∞—á–∏: " + project.tasks.size() + " —à—Ç.");

            for (int j = 0; j < project.tasks.size(); j++) {
                Task task = project.tasks.get(j);
                System.out.println("   ‚Ä¢ " + task.name + " (" + task.duration + " –¥–Ω–µ–π)");
            }
            System.out.println();
        }
    }

    private static void calculateCriticalPath() {
        if (projects.isEmpty()) {
            System.out.println(" –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞!");
            return;
        }

        System.out.println(" –†–∞—Å—á–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏...");

        for (Project project : projects) {
            if (!project.tasks.isEmpty()) {
                int totalDuration = project.tasks.stream().mapToInt(t -> t.duration).sum();
                String longestTask = project.tasks.stream()
                        .max((t1, t2) -> Integer.compare(t1.duration, t2.duration))
                        .get().name;

                System.out.println("\nüìä –ü—Ä–æ–µ–∫—Ç: " + project.name);
                System.out.println("‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + totalDuration + " –¥–Ω–µ–π");
                System.out.println("‚Ä¢ –°–∞–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: " + longestTask);
                System.out.println("‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: " + project.tasks.size());
            }
        }
    }


}